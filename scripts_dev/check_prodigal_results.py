#!/usr/bin/env python

###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__prog_name__ = 'check_prodigal_results.py'
__prog_desc__ = 'Produce file listing all genomes where the prodigal file is missing or equals to 0.'

__author__ = 'Pierre Chaumeil'
__copyright__ = 'Copyright 2017'
__credits__ = ['Pierre Chaumeil']
__license__ = 'GPL3'
__version__ = '0.0.1'
__maintainer__ = 'Pierre Chaumeil'
__email__ = 'p.chaumeil@uq.edu.au'
__status__ = 'Development'

import os
import sys
import argparse
from collections import defaultdict


class ProdChecker(object):
    """Produce file listing all genomes where the prodigal file is missing or equals to 0."""

    def __init__(self):
        pass

    def run(self, listfile, outfile):
        outf = open(outfile, 'w')
        with open(listfile, 'r') as genomelist:
            for line in genomelist:
                path_to_genome = line.split("\t")[1].strip()
                dirlist = [protfile for protfile in os.listdir(os.path.join(path_to_genome, 'prodigal')) if protfile.endswith("protein.faa")]
                if len(dirlist) != 1:
                    outf.write("{0}\t{1}\t{2}\n".format(line.split("\t")[0], "Missing protein.faa file", path_to_genome))
                elif os.path.getsize((os.path.join(path_to_genome, 'prodigal', dirlist[0]))) == 0:
                    outf.write("{0}\t{1}\t{2}\n".format(line.split("\t")[0], "protein.faa size equals 0", path_to_genome))
        outf.close()


if __name__ == '__main__':
    print __prog_name__ + ' v' + __version__ + ': ' + __prog_desc__
    print '  by ' + __author__ + ' (' + __email__ + ')' + '\n'

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('genome_dir_file', help='file generated by the ncbi_genome_dir script.')
    parser.add_argument('output_file', help='output file')

    args = parser.parse_args()

    try:
        p = ProdChecker()
        p.run(args.genome_dir_file, args.output_file)
    except SystemExit:
        print "\nControlled exit resulting from an unrecoverable error or warning."
    except Exception:
        print "\nUnexpected error:", sys.exc_info()[0]
        raise
