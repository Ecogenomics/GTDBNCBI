#!/usr/bin/env python

###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

import os
import sys
import re
import argparse
from collections import defaultdict
import random
import string

__prog_name__ = 'exception_list_creation.py'
__prog_desc__ = 'Generate 2 lists (Bacterial and Archaeal) of exceptions and store them in GTDB '

__author__ = 'Pierre Chaumeil'
__copyright__ = 'Copyright 2016'
__credits__ = ['Pierre Chaumeil']
__license__ = 'GPL3'
__version__ = '0.0.1'
__maintainer__ = 'Pierre Chaumeil'
__email__ = 'p.chaumeil@qfab.org'
__status__ = 'Development'


class ExceptionListGenerator(object):
    '''
    classdocs
    '''

    def __init__(self):
        '''
        Constructor
        '''

    def createExceptionLists(self, except_file, rel_id):
        bac_gids = []
        arc_gids = []
        with open(except_file) as f:
            f.readline()
            for line in f:
                genome_id = line.split(',')[0]
                if genome_id.startswith("GCA_"):
                    genome_id = "GB_" + genome_id
                elif genome_id.startswith("GCF_"):
                    genome_id = "RS_" + genome_id
                else:
                    sys.exit("Unknown genome id")
                taxonomy = line.split(',')[3]
                if 'd__Bacteria' in taxonomy:
                    bac_gids.append(genome_id)
                elif 'd__Archaea' in taxonomy:
                    arc_gids.append(genome_id)
                else:
                    sys.exit('Can not select taxonomy')

        cmd = "gtdb -r genome_lists create --name 'Archaeal exception list for GTDB {0}' --genome_ids {1} --description 'Archaeal exception list for GTDB {0}' --set_public".format(rel_id, ','.join(arc_gids))
        print cmd
        os.system(cmd)

        cmd = "gtdb -r genome_lists create --name 'Bacterial exception list for GTDB {0}' --genome_ids {1} --description 'Bacterial exception list for GTDB {0}' --set_public".format(rel_id, ','.join(bac_gids))
        print cmd
        os.system(cmd)

if __name__ == '__main__':
    print __prog_name__ + ' v' + __version__ + ': ' + __prog_desc__
    print '  by ' + __author__ + ' (' + __email__ + ')' + '\n'

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--exception_file', dest="except_file", required=True, help='Exception file generated by gtdb power tree_exceptions')
    parser.add_argument('--release_version', dest="rel_id", required=True, help='NCBI Release Id')

    args = parser.parse_args()

    try:
        p = ExceptionListGenerator()
        p.createExceptionLists(args.except_file, args.rel_id)
    except SystemExit:
        print "\nControlled exit resulting from an unrecoverable error or warning."
    except:
        print "\nUnexpected error:", sys.exc_info()[0]
        raise
